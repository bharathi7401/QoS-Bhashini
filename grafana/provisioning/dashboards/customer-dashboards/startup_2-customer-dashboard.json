{
  "id": null,
  "title": "Customer-2 - Bhashini QoS Dashboard",
  "tags": [
    "bhashini",
    "customer",
    "qos",
    "monitoring",
    "standard"
  ],
  "style": "dark",
  "timezone": "",
  "templating": {
    "list": [
      {
        "current": {
          "selected": true,
          "text": "All Services",
          "value": "$__all"
        },
        "datasource": {
          "type": "influxdb",
          "uid": "InfluxDB-Customer-startup_2"
        },
        "definition": "from(bucket: \"qos_metrics\")\n  |> range(start: -1h)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"qos_metrics\")\n  |> filter(fn: (r) => r[\"customer_id\"] == \"startup_2\")\n  |> group(columns: [\"service\"])\n  |> distinct(column: \"service\")\n  |> yield(name: \"available_services\")",
        "hide": 0,
        "includeAll": true,
        "multi": true,
        "name": "service_filter",
        "options": [],
        "query": "from(bucket: \"qos_metrics\")\n  |> range(start: -1h)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"qos_metrics\")\n  |> filter(fn: (r) => r[\"customer_id\"] == \"startup_2\")\n  |> group(columns: [\"service\"])\n  |> distinct(column: \"service\")\n  |> yield(name: \"available_services\")",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "type": "query"
      }
    ]
  },
  "panels": [
    {
      "id": 1,
      "title": "Customer Overview - Customer-2",
      "type": "stat",
      "targets": [
        {
          "refId": "A",
          "query": "from(bucket: \"qos_metrics\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"qos_metrics\")\n  |> filter(fn: (r) => r[\"customer_id\"] == \"startup_2\")\n  |> filter(fn: (r) => r[\"metric_type\"] == \"availability\")\n  |> group()\n  |> mean()\n  |> map(fn: (r) => ({r with _value: r._value * 100.0}))\n  |> yield(name: \"overall_availability\")",
          "datasource": {
            "type": "influxdb",
            "uid": "InfluxDB-Customer-startup_2"
          }
        }
      ],
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [],
          "unit": "percent",
          "thresholds": {
            "steps": [
              {
                "color": "red",
                "value": null
              },
              {
                "color": "yellow",
                "value": 95
              },
              {
                "color": "green",
                "value": 99
              }
            ]
          }
        }
      },
      "gridPos": {
        "h": 8,
        "w": 6,
        "x": 0,
        "y": 0
      },
      "options": {
        "colorMode": "value",
        "graphMode": "area",
        "justifyMode": "auto",
        "orientation": "auto",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "textMode": "auto"
      }
    },
    {
      "id": 2,
      "title": "SLA Tier: standard",
      "type": "stat",
      "targets": [
        {
          "refId": "A",
          "query": "from(bucket: \"qos_metrics\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"qos_metrics\")\n  |> filter(fn: (r) => r[\"customer_id\"] == \"startup_2\")\n  |> filter(fn: (r) => r[\"metric_type\"] == \"availability\")\n  |> group()\n  |> mean()\n  |> map(fn: (r) => ({\n    r with \n    sla_threshold: if \"standard\" == \"premium\" then 99.9 \n                   else if \"standard\" == \"standard\" then 99.5 \n                   else 99.0,\n    compliance_status: if r._value >= (if \"standard\" == \"premium\" then 0.999 \n                                      else if \"standard\" == \"standard\" then 0.995 \n                                      else 0.99) then \"compliant\" else \"breach\"\n  }))\n  |> yield(name: \"sla_compliance\")",
          "datasource": {
            "type": "influxdb",
            "uid": "InfluxDB-Customer-startup_2"
          }
        }
      ],
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [],
          "unit": "percent",
          "thresholds": {
            "steps": [
              {
                "color": "red",
                "value": null
              },
              {
                "color": "yellow",
                "value": 95
              },
              {
                "color": "green",
                "value": 99
              }
            ]
          }
        }
      },
      "gridPos": {
        "h": 8,
        "w": 6,
        "x": 6,
        "y": 0
      }
    },
    {
      "id": 3,
      "title": "API Calls (Last Hour)",
      "type": "stat",
      "targets": [
        {
          "refId": "A",
          "query": "from(bucket: \"qos_metrics\")\n  |> range(start: -1h)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"qos_metrics\")\n  |> filter(fn: (r) => r[\"customer_id\"] == \"startup_2\")\n  |> filter(fn: (r) => r[\"metric_type\"] == \"throughput\")\n  |> group()\n  |> sum()\n  |> yield(name: \"api_calls_last_hour\")",
          "datasource": {
            "type": "influxdb",
            "uid": "InfluxDB-Customer-startup_2"
          }
        }
      ],
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "mappings": [],
          "unit": "short"
        }
      },
      "gridPos": {
        "h": 8,
        "w": 6,
        "x": 12,
        "y": 0
      }
    },
    {
      "id": 4,
      "title": "Current Error Rate",
      "type": "stat",
      "targets": [
        {
          "refId": "A",
          "query": "from(bucket: \"qos_metrics\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"qos_metrics\")\n  |> filter(fn: (r) => r[\"customer_id\"] == \"startup_2\")\n  |> filter(fn: (r) => r[\"metric_type\"] == \"error_rate\")\n  |> group()\n  |> mean()\n  |> map(fn: (r) => ({r with _value: r._value * 100.0}))\n  |> yield(name: \"current_error_rate\")",
          "datasource": {
            "type": "influxdb",
            "uid": "InfluxDB-Customer-startup_2"
          }
        }
      ],
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [],
          "unit": "percent",
          "thresholds": {
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "yellow",
                "value": 50.0
              },
              {
                "color": "red",
                "value": 250.0
              }
            ]
          }
        }
      },
      "gridPos": {
        "h": 8,
        "w": 6,
        "x": 18,
        "y": 0
      }
    },
    {
      "id": 5,
      "title": "API Response Times - P50, P95, P99",
      "type": "timeseries",
      "targets": [
        {
          "refId": "A",
          "query": "from(bucket: \"qos_metrics\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"qos_metrics\")\n  |> filter(fn: (r) => r[\"customer_id\"] == \"startup_2\")\n  |> filter(fn: (r) => r[\"metric_type\"] == \"latency\")\n  |> filter(fn: (r) => contains(value: \"$__all\", set: v.service_filter) or contains(value: r[\"service\"], set: v.service_filter))\n  |> group(columns: [\"service\"])\n  |> aggregateWindow(every: v.windowPeriod, fn: quantile, createEmpty: false, q: 0.50, method: \"estimate_tdigest\")\n  |> yield(name: \"p50_latency\")",
          "datasource": {
            "type": "influxdb",
            "uid": "InfluxDB-Customer-startup_2"
          }
        },
        {
          "refId": "B",
          "query": "from(bucket: \"qos_metrics\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"qos_metrics\")\n  |> filter(fn: (r) => r[\"customer_id\"] == \"startup_2\")\n  |> filter(fn: (r) => r[\"metric_type\"] == \"latency\")\n  |> filter(fn: (r) => contains(value: \"$__all\", set: v.service_filter) or contains(value: r[\"service\"], set: v.service_filter))\n  |> group(columns: [\"service\"])\n  |> aggregateWindow(every: v.windowPeriod, fn: quantile, createEmpty: false, q: 0.95, method: \"estimate_tdigest\")\n  |> yield(name: \"p95_latency\")",
          "datasource": {
            "type": "influxdb",
            "uid": "InfluxDB-Customer-startup_2"
          }
        },
        {
          "refId": "C",
          "query": "from(bucket: \"qos_metrics\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"qos_metrics\")\n  |> filter(fn: (r) => r[\"customer_id\"] == \"startup_2\")\n  |> filter(fn: (r) => r[\"metric_type\"] == \"latency\")\n  |> filter(fn: (r) => contains(value: \"$__all\", set: v.service_filter) or contains(value: r[\"service\"], set: v.service_filter))\n  |> group(columns: [\"service\"])\n  |> aggregateWindow(every: v.windowPeriod, fn: quantile, createEmpty: false, q: 0.99, method: \"estimate_tdigest\")\n  |> yield(name: \"p99_latency\")",
          "datasource": {
            "type": "influxdb",
            "uid": "InfluxDB-Customer-startup_2"
          }
        }
      ],
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 10,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "vis": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "ms"
        }
      },
      "gridPos": {
        "h": 8,
        "w": 24,
        "x": 0,
        "y": 8
      }
    },
    {
      "id": 6,
      "title": "Error Rate by Service",
      "type": "timeseries",
      "targets": [
        {
          "refId": "A",
          "query": "from(bucket: \"qos_metrics\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"qos_metrics\")\n  |> filter(fn: (r) => r[\"customer_id\"] == \"startup_2\")\n  |> filter(fn: (r) => r[\"metric_type\"] == \"error_rate\")\n  |> filter(fn: (r) => contains(value: \"$__all\", set: v.service_filter) or contains(value: r[\"service\"], set: v.service_filter))\n  |> group(columns: [\"service\"])\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n  |> map(fn: (r) => ({r with _value: r._value * 100.0}))\n  |> yield(name: \"error_rate_by_service\")",
          "datasource": {
            "type": "influxdb",
            "uid": "InfluxDB-Customer-startup_2"
          }
        }
      ],
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 10,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "vis": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "yellow",
                "value": 50.0
              },
              {
                "color": "red",
                "value": 250.0
              }
            ]
          },
          "unit": "percent"
        }
      },
      "gridPos": {
        "h": 8,
        "w": 12,
        "x": 0,
        "y": 16
      }
    },
    {
      "id": 7,
      "title": "SLA Compliance Over Time",
      "type": "timeseries",
      "targets": [
        {
          "refId": "A",
          "query": "from(bucket: \"qos_metrics\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"qos_metrics\")\n  |> filter(fn: (r) => r[\"customer_id\"] == \"startup_2\")\n  |> filter(fn: (r) => r[\"metric_type\"] == \"availability\")\n  |> group(columns: [\"service\"])\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n  |> map(fn: (r) => ({\n    r with \n    sla_threshold: if \"standard\" == \"premium\" then 99.9 \n                   else if \"standard\" == \"standard\" then 99.5 \n                   else 99.0,\n    compliance_percentage: if r._value >= (if \"standard\" == \"premium\" then 0.999 \n                                          else if \"standard\" == \"standard\" then 0.995 \n                                          else 0.99) then 100.0 else (r._value * 100.0)\n  }))\n  |> yield(name: \"sla_compliance_trend\")",
          "datasource": {
            "type": "influxdb",
            "uid": "InfluxDB-Customer-startup_2"
          }
        }
      ],
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 10,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "vis": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "red",
                "value": null
              },
              {
                "color": "yellow",
                "value": 95
              },
              {
                "color": "green",
                "value": 99
              }
            ]
          },
          "unit": "percent"
        }
      },
      "gridPos": {
        "h": 8,
        "w": 12,
        "x": 12,
        "y": 16
      }
    },
    {
      "id": 8,
      "title": "API Call Volume Trends",
      "type": "timeseries",
      "targets": [
        {
          "refId": "A",
          "query": "from(bucket: \"qos_metrics\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"qos_metrics\")\n  |> filter(fn: (r) => r[\"customer_id\"] == \"startup_2\")\n  |> filter(fn: (r) => r[\"metric_type\"] == \"throughput\")\n  |> filter(fn: (r) => contains(value: \"$__all\", set: v.service_filter) or contains(value: r[\"service\"], set: v.service_filter))\n  |> group(columns: [\"service\"])\n  |> aggregateWindow(every: v.windowPeriod, fn: sum, createEmpty: false)\n  |> yield(name: \"api_call_volume\")",
          "datasource": {
            "type": "influxdb",
            "uid": "InfluxDB-Customer-startup_2"
          }
        }
      ],
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 10,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "vis": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              }
            ]
          },
          "unit": "short"
        }
      },
      "gridPos": {
        "h": 8,
        "w": 12,
        "x": 0,
        "y": 24
      }
    },
    {
      "id": 9,
      "title": "Service Usage Distribution",
      "type": "piechart",
      "targets": [
        {
          "refId": "A",
          "query": "from(bucket: \"qos_metrics\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"qos_metrics\")\n  |> filter(fn: (r) => r[\"customer_id\"] == \"startup_2\")\n  |> filter(fn: (r) => r[\"metric_type\"] == \"throughput\")\n  |> group(columns: [\"service\"])\n  |> sum()\n  |> yield(name: \"service_usage_distribution\")",
          "datasource": {
            "type": "influxdb",
            "uid": "InfluxDB-Customer-startup_2"
          }
        }
      ],
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "vis": false
            }
          },
          "mappings": []
        }
      },
      "gridPos": {
        "h": 8,
        "w": 12,
        "x": 12,
        "y": 24
      }
    },
    {
      "id": 10,
      "title": "Translation Service Performance",
      "type": "stat",
      "targets": [
        {
          "refId": "A",
          "query": "from(bucket: \"qos_metrics\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"qos_metrics\")\n  |> filter(fn: (r) => r[\"customer_id\"] == \"startup_2\")\n  |> filter(fn: (r) => r[\"service\"] == \"translation\")\n  |> filter(fn: (r) => r[\"metric_type\"] == \"latency\")\n  |> group()\n  |> mean()\n  |> yield(name: \"translation_latency\")",
          "datasource": {
            "type": "influxdb",
            "uid": "InfluxDB-Customer-startup_2"
          }
        }
      ],
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [],
          "unit": "ms",
          "thresholds": {
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "yellow",
                "value": 200
              },
              {
                "color": "red",
                "value": 500
              }
            ]
          }
        }
      },
      "gridPos": {
        "h": 8,
        "w": 8,
        "x": 0,
        "y": 32
      }
    },
    {
      "id": 11,
      "title": "TTS Service Performance",
      "type": "stat",
      "targets": [
        {
          "refId": "A",
          "query": "from(bucket: \"qos_metrics\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"qos_metrics\")\n  |> filter(fn: (r) => r[\"customer_id\"] == \"startup_2\")\n  |> filter(fn: (r) => r[\"service\"] == \"tts\")\n  |> filter(fn: (r) => r[\"metric_type\"] == \"latency\")\n  |> group()\n  |> mean()\n  |> yield(name: \"tts_latency\")",
          "datasource": {
            "type": "influxdb",
            "uid": "InfluxDB-Customer-startup_2"
          }
        }
      ],
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [],
          "unit": "ms",
          "thresholds": {
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "yellow",
                "value": 200
              },
              {
                "color": "red",
                "value": 500
              }
            ]
          }
        }
      },
      "gridPos": {
        "h": 8,
        "w": 8,
        "x": 8,
        "y": 32
      }
    },
    {
      "id": 12,
      "title": "ASR Service Performance",
      "type": "stat",
      "targets": [
        {
          "refId": "A",
          "query": "from(bucket: \"qos_metrics\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"qos_metrics\")\n  |> filter(fn: (r) => r[\"customer_id\"] == \"startup_2\")\n  |> filter(fn: (r) => r[\"service\"] == \"asr\")\n  |> filter(fn: (r) => r[\"metric_type\"] == \"latency\")\n  |> group()\n  |> mean()\n  |> yield(name: \"asr_latency\")",
          "datasource": {
            "type": "influxdb",
            "uid": "InfluxDB-Customer-startup_2"
          }
        }
      ],
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [],
          "unit": "ms",
          "thresholds": {
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "yellow",
                "value": 200
              },
              {
                "color": "red",
                "value": 500
              }
            ]
          }
        }
      },
      "gridPos": {
        "h": 8,
        "w": 8,
        "x": 16,
        "y": 32
      }
    }
  ],
  "refresh": "30s",
  "schemaVersion": 30,
  "time": {
    "from": "now-24h",
    "to": "now"
  },
  "timepicker": {},
  "uid": "startup_2-customer-dashboard",
  "version": 1
}