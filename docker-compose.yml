version: '3.8'

services:
  influxdb:
    image: influxdb:2.7
    container_name: bhashini-influxdb
    restart: unless-stopped
    ports:
      - "8086:8086"
    env_file:
      - config.env
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=admin
      - DOCKER_INFLUXDB_INIT_PASSWORD=admin123
      - DOCKER_INFLUXDB_INIT_ORG=bhashini
      - DOCKER_INFLUXDB_INIT_BUCKET=qos_metrics
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=admin-token-123
    volumes:
      - influxdb_data:/var/lib/influxdb2
      - ./influxdb/init-scripts:/docker-entrypoint-initdb.d
      - ./secrets:/secrets
    networks:
      - bhashini-network
    healthcheck:
      test: ["CMD", "influx", "ping", "--host", "http://localhost:8086"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  grafana:
    image: grafana/grafana:10.2.0
    container_name: bhashini-grafana
    restart: unless-stopped
    ports:
      - "3010:3000"
    env_file:
      - config.env
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH=/etc/grafana/provisioning/dashboards/provider-dashboards/bhashini-provider-overview.json
      - GF_DASHBOARDS_MIN_REFRESH_INTERVAL=5s
      - GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_UID=bhashini-provider-overview
      - INFLUXDB_PROVIDER_CROSS_TENANT_TOKEN=${INFLUXDB_PROVIDER_CROSS_TENANT_TOKEN}
      - INFLUXDB_GRAFANA_TOKEN=${INFLUXDB_GRAFANA_TOKEN:-admin-token-123}
      - INFLUXDB_TOKEN=admin-token-123
      - INFLUXDB_ORG=bhashini
      - INFLUXDB_BUCKET=qos_metrics
      - INFLUXDB_ENTERPRISE_1_TOKEN=${INFLUXDB_ENTERPRISE_1_TOKEN:-admin-token-123}
      - INFLUXDB_STARTUP_2_TOKEN=${INFLUXDB_STARTUP_2_TOKEN:-admin-token-123}
      - INFLUXDB_FREEMIUM_1_TOKEN=${INFLUXDB_FREEMIUM_1_TOKEN:-admin-token-123}
      - GF_UNIFIED_ALERTING_ENABLED=true
      - GF_SMTP_ENABLED=true
      - GF_SMTP_HOST=${SMTP_HOST}:${SMTP_PORT}
      - GF_SMTP_USER=${SMTP_USER}
      - GF_SMTP_PASSWORD=${SMTP_PASSWORD}
      - GF_SMTP_FROM_ADDRESS=${SMTP_FROM_ADDRESS}
      - GF_SMTP_FROM_NAME=${SMTP_FROM_NAME}
      - SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/config/grafana.ini:/etc/grafana/grafana.ini
      - ./grafana/entrypoint.sh:/entrypoint.sh
      - ./secrets:/secrets
      - ./grafana/provisioning/alerting:/etc/grafana/provisioning/alerting
    entrypoint: ["/bin/bash", "/entrypoint.sh"]
    networks:
      - bhashini-network
    depends_on:
      influxdb:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  data-simulator:
    build:
      context: ./data-simulator
      dockerfile: Dockerfile
    container_name: bhashini-data-simulator
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - INFLUXDB_URL=http://influxdb:8086
      - INFLUXDB_TOKEN=admin-token-123
      - INFLUXDB_ORG=bhashini
      - INFLUXDB_BUCKET=qos_metrics
      - SIMULATION_INTERVAL=10
      - LOG_LEVEL=INFO
    volumes:
      - ./config:/app/config
      - ./secrets:/secrets
    networks:
      - bhashini-network
    depends_on:
      - influxdb
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  postgres:
    image: postgres:15-alpine
    container_name: bhashini-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=bhashini_profiling
      - POSTGRES_USER=bhashini_user
      - POSTGRES_PASSWORD=bhashini_password
      - POSTGRES_HOST_AUTH_METHOD=trust
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/profiling-db-init.sql:/docker-entrypoint-initdb.d/01-init.sql
      - ./secrets:/secrets
    networks:
      - bhashini-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U bhashini_user -d bhashini_profiling"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  bi-api:
    build:
      context: ./bi-engine
      dockerfile: Dockerfile
    container_name: bhashini-bi-api
    restart: unless-stopped
    ports:
      - "8001:8000"
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=bhashini_profiling
      - POSTGRES_USER=bhashini_user
      - POSTGRES_PASSWORD=bhashini_password
      - INFLUXDB_URL=http://influxdb:8086
      - INFLUXDB_TOKEN=admin-token-123
      - INFLUXDB_ORG=bhashini
      - INFLUXDB_BUCKET=qos_metrics
      - BI_API_SECRET_KEY=${BI_API_SECRET_KEY:-default-secret-key-change-in-production}
      - BI_API_DEBUG=${BI_API_DEBUG:-false}
      - ENABLE_VALUE_ESTIMATION=${ENABLE_VALUE_ESTIMATION:-true}
      - ENABLE_RECOMMENDATIONS=${ENABLE_RECOMMENDATIONS:-true}
      - ENABLE_SECTOR_DASHBOARDS=${ENABLE_SECTOR_DASHBOARDS:-true}
    volumes:
      - ./config:/app/config
      - ./secrets:/secrets
      - ./bi-engine:/app
    networks:
      - bhashini-network
    depends_on:
      postgres:
        condition: service_healthy
      influxdb:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  influxdb_data:
    driver: local
  grafana_data:
    driver: local
  postgres_data:
    driver: local

networks:
  bhashini-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
