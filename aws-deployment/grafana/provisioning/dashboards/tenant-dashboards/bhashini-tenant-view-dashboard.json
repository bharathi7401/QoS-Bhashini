{
  "id": null,
  "title": "Bhashini - Customer QoS & SLA Overview",
  "tags": ["bhashini", "provider", "customer-overview", "qos", "sla"],
  "style": "dark",
  "timezone": "browser",
  "panels": [
    {
      "id": 1,
      "title": "Total Active Customers",
      "type": "stat",
      "targets": [
        {
          "refId": "A",
          "query": "from(bucket: \"qos_metrics\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"qos_metrics\")\n  |> filter(fn: (r) => r[\"_field\"] == \"value\")\n  |> group(columns: [\"tenant_id\"])\n  |> count()\n  |> map(fn: (r) => ({\n      _time: r._time,\n      _value: r._value,\n      tenant: r.tenant_id,\n      count: r._value\n    }))",
          "datasource": {
            "type": "influxdb",
            "uid": "influxdb-qos-metrics"
          }
        }
      ],
      "fieldConfig": {
        "defaults": {
          "color": {"mode": "palette-classic"},
          "mappings": [],
          "unit": "none",
          "displayName": "Customer Count"
        }
      },
      "gridPos": {"h": 8, "w": 6, "x": 0, "y": 0}
    },
    {
      "id": 2,
      "title": "Overall System Availability",
      "type": "stat",
      "targets": [
        {
          "refId": "A",
          "query": "from(bucket: \"qos_metrics\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"qos_metrics\")\n  |> filter(fn: (r) => r[\"_field\"] == \"value\")\n  |> filter(fn: (r) => r[\"metric_type\"] == \"availability\")\n  |> group()\n  |> mean()\n  |> map(fn: (r) => ({\n      _time: r._time,\n      _value: r._value,\n      metric: \"System Availability\"\n    }))",
          "datasource": {
            "type": "influxdb",
            "uid": "influxdb-qos-metrics"
          }
        }
      ],
      "fieldConfig": {
        "defaults": {
          "color": {"mode": "thresholds"},
          "mappings": [],
          "unit": "percent",
          "thresholds": {
            "steps": [
              {"color": "red", "value": null},
              {"color": "yellow", "value": 95},
              {"color": "green", "value": 99}
            ]
          },
          "displayName": "Availability"
        }
      },
      "gridPos": {"h": 8, "w": 6, "x": 6, "y": 0}
    },
    {
      "id": 3,
      "title": "Average Response Time",
      "type": "stat",
      "targets": [
        {
          "refId": "A",
          "query": "from(bucket: \"qos_metrics\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"qos_metrics\")\n  |> filter(fn: (r) => r[\"_field\"] == \"value\")\n  |> filter(fn: (r) => r[\"metric_type\"] == \"latency\")\n  |> group()\n  |> mean()\n  |> map(fn: (r) => ({\n      _time: r._time,\n      _value: r._value,\n      metric: \"Response Time\"\n    }))",
          "datasource": {
            "type": "influxdb",
            "uid": "influxdb-qos-metrics"
          }
        }
      ],
      "fieldConfig": {
        "defaults": {
          "color": {"mode": "thresholds"},
          "mappings": [],
          "unit": "ms",
          "thresholds": {
            "steps": [
              {"color": "green", "value": null},
              {"color": "yellow", "value": 100},
              {"color": "red", "value": 200}
            ]
          },
          "displayName": "Response Time"
        }
      },
      "gridPos": {"h": 8, "w": 6, "x": 12, "y": 0}
    },
    {
      "id": 4,
      "title": "Overall Error Rate",
      "type": "stat",
      "targets": [
        {
          "refId": "A",
          "query": "from(bucket: \"qos_metrics\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"qos_metrics\")\n  |> filter(fn: (r) => r[\"_field\"] == \"value\")\n  |> filter(fn: (r) => r[\"metric_type\"] == \"error_rate\")\n  |> group()\n  |> mean()\n  |> map(fn: (r) => ({\n      _time: r._time,\n      _value: r._value,\n      metric: \"Error Rate\"\n    }))",
          "datasource": {
            "type": "influxdb",
            "uid": "influxdb-qos-metrics"
          }
        }
      ],
      "fieldConfig": {
        "defaults": {
          "color": {"mode": "thresholds"},
          "mappings": [],
          "unit": "percent",
          "thresholds": {
            "steps": [
              {"color": "green", "value": null},
              {"color": "yellow", "value": 1},
              {"color": "red", "value": 5}
            ]
          },
          "displayName": "Error Rate"
        }
      },
      "gridPos": {"h": 8, "w": 6, "x": 18, "y": 0}
    },
    {
      "id": 5,
      "title": "Customer Performance Ranking",
      "type": "table",
      "targets": [
        {
          "refId": "A",
          "query": "from(bucket: \"qos_metrics\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"qos_metrics\")\n  |> filter(fn: (r) => r[\"_field\"] == \"value\")\n  |> filter(fn: (r) => r[\"metric_type\"] == \"availability\")\n  |> group(columns: [\"tenant_id\"])\n  |> mean()\n  |> sort(columns: [\"_value\"], desc: true)\n  |> limit(n: 10)\n  |> map(fn: (r) => ({\n      _time: r._time,\n      tenant: r.tenant_id,\n      availability: r._value,\n      rank: \"Top Performer\"\n    }))",
          "datasource": {
            "type": "influxdb",
            "uid": "influxdb-qos-metrics"
          }
        }
      ],
      "fieldConfig": {
        "defaults": {
          "unit": "percent",
          "displayName": "Performance Data"
        }
      },
      "gridPos": {"h": 8, "w": 12, "x": 0, "y": 8}
    },
    {
      "id": 6,
      "title": "SLA Tier Distribution",
      "type": "piechart",
      "targets": [
        {
          "refId": "A",
          "query": "from(bucket: \"qos_metrics\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"qos_metrics\")\n  |> filter(fn: (r) => r[\"_field\"] == \"value\")\n  |> group(columns: [\"sla_tier\"])\n  |> count()\n  |> map(fn: (r) => ({\n      _time: r._time,\n      _value: r._value,\n      sla_tier: if r.sla_tier == \"premium\" then \"Premium\" else if r.sla_tier == \"standard\" then \"Standard\" else \"Basic\",\n      count: r._value\n    }))",
          "datasource": {
            "type": "influxdb",
            "uid": "influxdb-qos-metrics"
          }
        }
      ],
      "fieldConfig": {
        "defaults": {
          "displayName": "SLA Tier",
          "unit": "none"
        }
      },
      "options": {
        "legend": {
          "displayMode": "visible",
          "placement": "bottom",
          "values": ["value", "percent"]
        },
        "pieType": "pie",
        "reduceOptions": {
          "calcs": ["lastNotNull"],
          "fields": "",
          "values": false
        },
        "tooltip": {
          "mode": "single",
          "sort": "none"
        }
      },
      "gridPos": {"h": 8, "w": 12, "x": 12, "y": 8}
    },
    {
      "id": 7,
      "title": "Worst 5 Customers - Availability",
      "type": "table",
      "targets": [
        {
          "refId": "A",
          "query": "from(bucket: \"qos_metrics\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"qos_metrics\")\n  |> filter(fn: (r) => r[\"_field\"] == \"value\")\n  |> filter(fn: (r) => r[\"metric_type\"] == \"availability\")\n  |> group(columns: [\"tenant_id\"])\n  |> mean()\n  |> sort(columns: [\"_value\"])\n  |> limit(n: 5)\n  |> map(fn: (r) => ({\n      _time: r._time,\n      tenant: r.tenant_id,\n      availability: r._value,\n      status: if r._value >= 99.0 then \"Excellent\" else if r._value >= 95.0 then \"Good\" else \"Poor\"\n    }))",
          "datasource": {
            "type": "influxdb",
            "uid": "influxdb-qos-metrics"
          }
        }
      ],
      "fieldConfig": {
        "defaults": {
          "unit": "percent",
          "color": {"mode": "thresholds"},
          "thresholds": {
            "steps": [
              {"color": "red", "value": null},
              {"color": "yellow", "value": 95},
              {"color": "green", "value": 99}
            ]
          },
          "displayName": "Availability"
        }
      },
      "gridPos": {"h": 8, "w": 8, "x": 0, "y": 16}
    },
    {
      "id": 8,
      "title": "Worst 5 Customers - Response Time",
      "type": "table",
      "targets": [
        {
          "refId": "A",
          "query": "from(bucket: \"qos_metrics\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"qos_metrics\")\n  |> filter(fn: (r) => r[\"_field\"] == \"value\")\n  |> filter(fn: (r) => r[\"metric_type\"] == \"latency\")\n  |> group(columns: [\"tenant_id\"])\n  |> mean()\n  |> sort(columns: [\"_value\"], desc: true)\n  |> limit(n: 5)\n  |> map(fn: (r) => ({\n      _time: r._time,\n      tenant: r.tenant_id,\n      response_time: r._value,\n      status: if r._value <= 100 then \"Excellent\" else if r._value <= 200 then \"Good\" else \"Poor\"\n    }))",
          "datasource": {
            "type": "influxdb",
            "uid": "influxdb-qos-metrics"
          }
        }
      ],
      "fieldConfig": {
        "defaults": {
          "unit": "ms",
          "color": {"mode": "thresholds"},
          "thresholds": {
            "steps": [
              {"color": "green", "value": null},
              {"color": "yellow", "value": 100},
              {"color": "red", "value": 200}
            ]
          },
          "displayName": "Response Time"
        }
      },
      "gridPos": {"h": 8, "w": 8, "x": 8, "y": 16}
    },
    {
      "id": 9,
      "title": "Worst 5 Customers - Error Rate",
      "type": "table",
      "targets": [
        {
          "refId": "A",
          "query": "from(bucket: \"qos_metrics\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"qos_metrics\")\n  |> filter(fn: (r) => r[\"_field\"] == \"value\")\n  |> filter(fn: (r) => r[\"metric_type\"] == \"error_rate\")\n  |> group(columns: [\"tenant_id\"])\n  |> mean()\n  |> sort(columns: [\"_value\"], desc: true)\n  |> limit(n: 5)\n  |> map(fn: (r) => ({\n      _time: r._time,\n      tenant: r.tenant_id,\n      error_rate: r._value,\n      status: if r._value <= 1.0 then \"Excellent\" else if r._value <= 5.0 then \"Good\" else \"Poor\"\n    }))",
          "datasource": {
            "type": "influxdb",
            "uid": "influxdb-qos-metrics"
          }
        }
      ],
      "fieldConfig": {
        "defaults": {
          "unit": "percent",
          "color": {"mode": "thresholds"},
          "thresholds": {
            "steps": [
              {"color": "green", "value": null},
              {"color": "yellow", "value": 1},
              {"color": "red", "value": 5}
            ]
          },
          "displayName": "Error Rate"
        }
      },
      "gridPos": {"h": 8, "w": 8, "x": 16, "y": 16}
    },
    {
      "id": 10,
      "title": "SLA Violation Trends Over Time",
      "type": "timeseries",
      "targets": [
        {
          "refId": "A",
          "query": "from(bucket: \"qos_metrics\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"qos_metrics\")\n  |> filter(fn: (r) => r[\"_field\"] == \"value\")\n  |> filter(fn: (r) => (r[\"metric_type\"] == \"availability\" and r[\"_value\"] < 95.0) or (r[\"metric_type\"] == \"latency\" and r[\"_value\"] > 200) or (r[\"metric_type\"] == \"error_rate\" and r[\"_value\"] > 5.0))\n  |> group(columns: [\"tenant_id\"])\n  |> aggregateWindow(every: 1h, fn: count, createEmpty: false)\n  |> map(fn: (r) => ({\n      _time: r._time,\n      _value: r._value,\n      tenant: r.tenant_id,\n      violations: r._value\n    }))",
          "datasource": {
            "type": "influxdb",
            "uid": "influxdb-qos-metrics"
          }
        }
      ],
      "fieldConfig": {
        "defaults": {
          "unit": "none",
          "color": {"mode": "palette-classic"},
          "displayName": "SLA Violations"
        }
      },
      "gridPos": {"h": 8, "w": 12, "x": 0, "y": 24}
    },
    {
      "id": 11,
      "title": "Customer Compliance Status Summary",
      "type": "stat",
      "targets": [
        {
          "refId": "A",
          "query": "from(bucket: \"qos_metrics\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"qos_metrics\")\n  |> filter(fn: (r) => r[\"_field\"] == \"value\")\n  |> filter(fn: (r) => r[\"metric_type\"] == \"availability\")\n  |> group(columns: [\"tenant_id\"])\n  |> mean()\n  |> map(fn: (r) => ({\n      _time: r._time,\n      _value: if r._value >= 99.0 then 1 else if r._value >= 95.0 then 2 else 3,\n      tenant: r.tenant_id,\n      status: if r._value >= 99.0 then \"Fully Compliant\" else if r._value >= 95.0 then \"At Risk\" else \"Non-Compliant\"\n    }))\n  |> group()\n  |> count()\n  |> map(fn: (r) => ({\n      _time: r._time,\n      _value: r._value,\n      metric: \"Compliant Customers\"\n    }))",
          "datasource": {
            "type": "influxdb",
            "uid": "influxdb-qos-metrics"
          }
        }
      ],
      "fieldConfig": {
        "defaults": {
          "color": {"mode": "palette-classic"},
          "unit": "none",
          "displayName": "Compliant Customers"
        }
      },
      "gridPos": {"h": 8, "w": 12, "x": 12, "y": 24}
    },
    {
      "id": 12,
      "title": "Customer Availability Heatmap",
      "type": "heatmap",
      "targets": [
        {
          "refId": "A",
          "query": "from(bucket: \"qos_metrics\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"qos_metrics\")\n  |> filter(fn: (r) => r[\"_field\"] == \"value\")\n  |> filter(fn: (r) => r[\"metric_type\"] == \"availability\")\n  |> group(columns: [\"tenant_id\"])\n  |> aggregateWindow(every: 1h, fn: mean, createEmpty: false)\n  |> map(fn: (r) => ({\n      _time: r._time,\n      _value: r._value,\n      tenant: r.tenant_id,\n      availability: r._value\n    }))",
          "datasource": {
            "type": "influxdb",
            "uid": "influxdb-qos-metrics"
          }
        }
      ],
      "fieldConfig": {
        "defaults": {
          "unit": "percent",
          "displayName": "Availability"
        }
      },
      "gridPos": {"h": 8, "w": 12, "x": 0, "y": 32}
    },
    {
      "id": 13,
      "title": "Service Performance by Customer",
      "type": "table",
      "targets": [
        {
          "refId": "A",
          "query": "from(bucket: \"qos_metrics\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"qos_metrics\")\n  |> filter(fn: (r) => r[\"_field\"] == \"value\")\n  |> filter(fn: (r) => r[\"metric_type\"] == \"availability\")\n  |> group(columns: [\"tenant_id\", \"service_name\"])\n  |> mean()\n  |> sort(columns: [\"tenant_id\", \"service_name\"])\n  |> map(fn: (r) => ({\n      _time: r._time,\n      tenant: r.tenant_id,\n      service: r.service_name,\n      availability: r._value\n    }))",
          "datasource": {
            "type": "influxdb",
            "uid": "influxdb-qos-metrics"
          }
        }
      ],
      "fieldConfig": {
        "defaults": {
          "unit": "percent",
          "displayName": "Service Performance"
        }
      },
      "gridPos": {"h": 8, "w": 12, "x": 12, "y": 32}
    },
    {
      "id": 14,
      "title": "Customer SLA Compliance Status",
      "type": "table",
      "targets": [
        {
          "refId": "A",
          "query": "from(bucket: \"qos_metrics\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"qos_metrics\")\n  |> filter(fn: (r) => r[\"_field\"] == \"value\")\n  |> filter(fn: (r) => r[\"metric_type\"] == \"availability\")\n  |> group(columns: [\"tenant_id\", \"sla_tier\"])\n  |> mean()\n  |> map(fn: (r) => ({\n      _time: r._time,\n      tenant: r.tenant_id,\n      sla_tier: r.sla_tier,\n      availability: r._value,\n      compliant: if r._value >= 99.0 then \"Yes\" else if r._value >= 95.0 then \"Partial\" else \"No\"\n    }))\n  |> sort(columns: [\"tenant_id\"])",
          "datasource": {
            "type": "influxdb",
            "uid": "influxdb-qos-metrics"
          }
        }
      ],
      "fieldConfig": {
        "defaults": {
          "unit": "percent",
          "thresholds": {
            "steps": [
              {"color": "red", "value": null},
              {"color": "yellow", "value": 95},
              {"color": "green", "value": 99}
            ]
          },
          "displayName": "SLA Compliance"
        }
      },
      "gridPos": {"h": 8, "w": 12, "x": 0, "y": 40}
    },
    {
      "id": 15,
      "title": "Customer Error Rate Comparison",
      "type": "barchart",
      "targets": [
        {
          "refId": "A",
          "query": "from(bucket: \"qos_metrics\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"qos_metrics\")\n  |> filter(fn: (r) => r[\"_field\"] == \"value\")\n  |> filter(fn: (r) => r[\"metric_type\"] == \"error_rate\")\n  |> group(columns: [\"tenant_id\"])\n  |> mean()\n  |> sort(columns: [\"_value\"])\n  |> map(fn: (r) => ({\n      _time: r._time,\n      _value: r._value,\n      tenant: r.tenant_id,\n      error_rate: r._value\n    }))",
          "datasource": {
            "type": "influxdb",
            "uid": "influxdb-qos-metrics"
          }
        }
      ],
      "fieldConfig": {
        "defaults": {
          "color": {"mode": "thresholds"},
          "unit": "percent",
          "thresholds": {
            "steps": [
              {"color": "green", "value": null},
              {"color": "yellow", "value": 1},
              {"color": "red", "value": 5}
            ]
          },
          "displayName": "Error Rate"
        }
      },
      "gridPos": {"h": 8, "w": 12, "x": 12, "y": 40}
    },
    {
      "id": 16,
      "title": "Customer Throughput Analysis",
      "type": "barchart",
      "targets": [
        {
          "refId": "A",
          "query": "from(bucket: \"qos_metrics\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"qos_metrics\")\n  |> filter(fn: (r) => r[\"_field\"] == \"value\")\n  |> filter(fn: (r) => r[\"metric_type\"] == \"throughput\")\n  |> group(columns: [\"tenant_id\"])\n  |> sum()\n  |> sort(columns: [\"_value\"], desc: true)\n  |> map(fn: (r) => ({\n      _time: r._time,\n      _value: r._value,\n      tenant: r.tenant_id,\n      throughput: r._value\n    }))",
          "datasource": {
            "type": "influxdb",
            "uid": "influxdb-qos-metrics"
          }
        }
      ],
      "fieldConfig": {
        "defaults": {
          "color": {"mode": "palette-classic"},
          "unit": "requests_per_minute",
          "displayName": "Throughput"
        }
      },
      "gridPos": {"h": 8, "w": 12, "x": 0, "y": 48}
    },
    {
      "id": 17,
      "title": "SLA Violations by Customer",
      "type": "table",
      "targets": [
        {
          "refId": "A",
          "query": "from(bucket: \"qos_metrics\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"qos_metrics\")\n  |> filter(fn: (r) => r[\"_field\"] == \"value\")\n  |> filter(fn: (r) => (r[\"metric_type\"] == \"availability\" and r[\"_value\"] < 95.0) or (r[\"metric_type\"] == \"latency\" and r[\"_value\"] > 200) or (r[\"metric_type\"] == \"error_rate\" and r[\"_value\"] > 5.0))\n  |> group(columns: [\"tenant_id\", \"service_name\", \"metric_type\"])\n  |> last()\n  |> sort(columns: [\"_time\"], desc: true)\n  |> map(fn: (r) => ({\n      _time: r._time,\n      tenant: r.tenant_id,\n      service: r.service_name,\n      metric_type: r.metric_type,\n      value: r._value,\n      violation: if r[\"metric_type\"] == \"availability\" then \"Below SLA\" else if r[\"metric_type\"] == \"latency\" then \"Above 200ms\" else \"Above 5%\"\n    }))",
          "datasource": {
            "type": "influxdb",
            "uid": "influxdb-qos-metrics"
          }
        },
        {
          "refId": "B",
          "query": "from(bucket: \"qos_metrics\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"qos_metrics\")\n  |> filter(fn: (r) => r[\"_field\"] == \"value\")\n  |> group(columns: [\"tenant_id\"])\n  |> last()\n  |> map(fn: (r) => ({\n      _time: r._time,\n      tenant: r.tenant_id,\n      status: \"No Violations\",\n      compliance_streak: \"All customers compliant\",\n      last_check: r._time\n    }))",
          "datasource": {
            "type": "influxdb",
            "uid": "influxdb-qos-metrics"
          }
        }
      ],
      "fieldConfig": {
        "defaults": {
          "displayName": "Violation Details",
          "unit": "none"
        }
      },
      "options": {
        "showHeader": true,
        "sortBy": [
          {
            "desc": true,
            "displayName": "Time"
          }
        ]
      },
      "gridPos": {"h": 8, "w": 24, "x": 0, "y": 56}
    }
  ],
  "time": {
    "from": "now-6h",
    "to": "now"
  },
  "timepicker": {},
  "templating": {
    "list": []
  },
  "annotations": {
    "list": []
  },
  "refresh": "5s",
  "schemaVersion": 30,
  "version": 1,
  "links": [],
  "uid": "bhashini-tenant-view-dashboard"
}
